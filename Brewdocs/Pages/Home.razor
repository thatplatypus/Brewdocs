@page "/"
@inherits PageBase
@using Brewdocs.Shared

<PageTitle>Home</PageTitle>

<div class="container">
    <div class="row">
        <!-- Cards for creating new documents -->
        <div class="col-md-4">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">New Document</h5>
                    <p class="card-text">Create a new document.</p>
                    <a href="#" class="btn btn-primary">Create</a>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">New Spreadsheet</h5>
                    <p class="card-text">Create a new spreadsheet.</p>
                    <a href="#" class="btn btn-primary">Create</a>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">New Doodle</h5>
                    <p class="card-text">Create a new doodle.</p>
                    <a href="#" class="btn btn-primary">Create</a>
                </div>
            </div>
        </div>
    </div>

    <FlexRow>
        <h6>Recent Items</h6>
        <FlexSpacer />
        <Button @onclick="ClearRecent">Clear</Button>
    </FlexRow>

    <div class="row mt-4">
        <!-- Table for LRU cache documents -->
        <div class="col-md-8">
            <Grid @ref="_grid"
                  TItem="RecentDocument"
                  Class="table table-hover table-bordered table-striped"
                  DataProvider="RecentDocumentDataProvider"
                  AllowPaging="true"
                  PageSize="5"
                  Responsive="true">

                <GridColumn ColumnClass="@(_ => "grid-col-icon")" TItem="RecentDocument">
                    <FileTypeIcon FileExtension="@context.Document.FileExtension" />
                </GridColumn>

                <GridColumn TItem="RecentDocument" HeaderText="Type">
                    @context.Document.DocumentType
                </GridColumn>

                <GridColumn TItem="RecentDocument" HeaderText="Name">
                    @context.Document.Name
                </GridColumn>

                <GridColumn TItem="RecentDocument" HeaderText="Last Accessed">
                    @DateFormatUtilities.GetRelativeTime(context.Document.LastAccessed)
                </GridColumn>

                <GridColumn TItem="RecentDocument">
                    <Button @onclick="@(() => NavigationManager.NavigateTo($"{context.Document.DocumentType}/{context.Document.ShortName}"))">Open</Button>
                </GridColumn>


            </Grid>
        </div>

        <div class="col-md-4">
            <DocumentDropZone Size="100" Color="@ThemeColor" SupportedFiles="@(new List<string>() {"xls", "xlsx", "csv", "doc", "docx", "pdf", "ppt", "pptx" })" OnInputFileChange="OnInputFileUploaded" />
        </div>
    </div>
</div>

@code {
    [Inject]
    ILRUCacheService LRUCache { get; set; }

    [Inject]
    NavigationManager NavigationManager { get; set; }

    private List<RecentDocument> _recentDocuments { get; set; }

    private Grid<RecentDocument> _grid { get; set; } = default!;

    public override string Identifier => "Home";

    public override string ThemeColor => "var(--bs-primary)";

    private async Task<GridDataProviderResult<RecentDocument>> RecentDocumentDataProvider(GridDataProviderRequest<RecentDocument> request)
    {
        if (_recentDocuments is null)
            _recentDocuments = await LRUCache.GetAllAsync();

        return await Task.FromResult(request.ApplyTo(_recentDocuments));
    }

    protected async Task ClearRecent()
    {
        await LRUCache.ClearCacheAsync();
        _recentDocuments = null;
        await _grid.RefreshDataAsync();
        StateHasChanged();
    }

    protected async Task OnInputFileUploaded(InputFileChangeEventArgs args)
    {
        foreach (var file in args.GetMultipleFiles())
        {
            var document = await base.ProcessFileAsync(file, ExtensionToDocumentType(file.Name.Substring(file.Name.IndexOf('.') + 1)));

            if (args.FileCount == 1)
            {
                NavigationManager.NavigateTo($"{ExtensionToDocumentType(file.Name.Substring(file.Name.IndexOf('.') + 1))}/{document?.ShortName}");
            }
        }
    }

    private string ExtensionToDocumentType(string fileExtension)
    {
        return fileExtension switch
        {
            "docx" => DocumentTypes.Documents,
            "doc" => DocumentTypes.Documents,
            "rtf" => DocumentTypes.Documents,
            "txt" => DocumentTypes.Documents,
            "xlsx" => DocumentTypes.Spreadsheets,
            "xls" => DocumentTypes.Spreadsheets,
            "csv" => DocumentTypes.Spreadsheets,
            "pptx" => DocumentTypes.Presentations,
            "ppt" => DocumentTypes.Presentations,
            "png" => DocumentTypes.Doodles,
            "jpg" => DocumentTypes.Doodles,
            "pdf" => DocumentTypes.Viewer,
            _ => DocumentTypes.Viewer
        };
    }
}