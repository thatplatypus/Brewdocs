@page "/Documents"
@inherits PageBase
@using Syncfusion
@using Syncfusion.Blazor.DocumentEditor

<div class="container-xl">
    @if (_loading || !_renderedOnce)
    {
        <FlexContainer Class="text-align-center">
            <FlexColumn Gap="4" Style="width:100%;">
                <h6 style="place-self:center;" class="mb-4">Loading...</h6>
                <Brewdocs.Components.Shared.Loaders.RollerLoader Color="@_themeColor" Scale="2" />
            </FlexColumn>
        </FlexContainer>
    }

    @if (_renderedOnce)
    {
        <FlexContainer>
            <FileDropZone class="drop-zone w-50 border" style="@($"color:{ThemeColor};")">
                <FlexColumn>

                    <Icon Name="IconName.Upload" Size="IconSize.x1" Style="place-self:center;margin-top:2em;" />

                    <label style="align-self:center;">Drag and Drop file here or Choose file</label>

                    <InputFile class="form-control w-50" style="align-self:center;" OnChange="OnInputFileChange" />

                </FlexColumn>
            </FileDropZone>
        </FlexContainer>
    }

</div>

@code {

    public override string Identifier => "Documents";

    public override string ThemeColor => "var(--bs-cyan)";

    private string _themeColor = "var(--bs-cyan)";

    private bool _loading = true;

    private bool _renderedOnce = false;

    private string ImageUrl = "";

    private IBrowserFile SelectedFile = null;

    private string SelectedFileName => this.SelectedFile?.Name ?? "No file uploaded";

    private string ErrorText = null;

    protected void OnCreated()
    {
        _loading = false;
    }

    protected override void OnParametersSet()
    {
        base.ChangeTheme(_themeColor);
        base.OnParametersSet();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            StateHasChanged();

            await Task.Delay(100);

            _renderedOnce = true;
            _loading = false;

            await Task.Yield();

            StateHasChanged();
        }
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs args)
    {
        this.SelectedFile = args.File;
        this.ImageUrl = "";
        this.ErrorText = null;

        //should validate document

        var contentBytes = new byte[this.SelectedFile.Size];
        using var stream = this.SelectedFile.OpenReadStream();
        await stream.ReadAsync(contentBytes, 0, contentBytes.Length);

        var contentBase64Str = Convert.ToBase64String(contentBytes);
        var contentType = this.SelectedFile.ContentType;
        this.ImageUrl = "data:" + contentType + ";base64," + contentBase64Str;

        var document = new ActiveDocument()
        {
            DocumentType = Identifier,
            Name = this.SelectedFile.Name,
            Data = contentBytes
        };

        await base.AddActiveDocumentAsync(this.SelectedFile.Name, document);

        NavigationManager.NavigateTo($"Documents/{document.ShortName}");
    }

}

